<?php
// $Id$

/**
 * @file
 * Main module file for List Mixer module
 * (Preset storing methods inspired by Imagecache)
 */

/**
 * ListMixer preset storage constant for user-defined presets in the DB.
 */
define('LISTMIXER_STORAGE_NORMAL', 0);

/**
 * ListMixer preset storage constant for module-defined presets in code.
 */
define('LISTMIXER_STORAGE_DEFAULT', 1);

/**
 * ListMixer preset storage constant for user-defined presets that override
 * module-defined presets.
 */
define('LISTMIXER_STORAGE_OVERRIDE', 2);

/**
 * Includes
 */
include('includes/listmixer.utilities.inc');
include('includes/listmixer.hooks.inc');
include('includes/listmixer.presets.inc');
include('includes/listmixer.interactions.inc');
include('includes/listmixer.behaviors.inc');

/**
 * Implementation of hook_help().
 */
function listmixer_help($section) {
  switch ($section) {
    case 'admin/help#listmixer':
    return '<p>'. t('List Mixer helps users of a Drupal website to manage
    methods of creating and updating lists of content. List Mixer works with
    fields, views and taxonomy.
    A site administrator can set up any number of interaction presets. The
    interaction presets allow associations of content types, fields, views,
    taxonomy terms, block ids to be connected up to a variety of ajax-tools
    and data storage methods.') .'</p>';
  }
}

/**
 * Implementation of hook_perm().
 */
function listmixer_perm() {
  $perms = array('administer list mixer', 'access list mixer');
  /* @TODO re-enable when permissions hooked up to preset building function.
    foreach (listmixer_presets() as $preset) {
    $perms[] =  'view listmixer '. $preset['preset_name'];
  }*/
  return $perms;
}

/**
 * Implementation of hook_menu().
 */
function listmixer_menu() {
  $items = array();
  // Code extract configuration pages
  $items['admin/settings/listmixer'] = array(
    'title' => 'List Mixer Settings',
    'description' => 'Configure List Mixer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('listmixer_admin_settings'),
    'access arguments' => array('administer list mixer'),
    'file' => 'includes/listmixer.admin.inc',
  );
  $items['admin/settings/behaviors/update/registry'] = array(
    'title' => 'Update Registry',
    'description' => 'Update Registry',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('listmixer_behaviors_registry_form'),
    'access arguments' => array('administer list mixer'),
    'file' => 'includes/listmixer.behaviors.inc',
  );
   // @TODO: There are probably too many arguments here, but it is due to the
   // way the behaviors are named. But this version works for now.
    $items['admin/ajax/listmixer/behavior/%/%/%'] = array(
    'title' => 'Executing ajax function',
    'description' => 'loading form callback',
    'page callback' => 'listmixer_behaviors_callback',
    'page arguments' => array(4, 5, 6),
    'access arguments' => array('administer list mixer'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/ajax/listmixer/redirect/%/%/%'] = array(
    'title' => 'Executing ajax redirect function',
    'description' => 'redirecting form callback',
    'page callback' => 'listmixer_behaviors_redirect_callback',
    'page arguments' => array(4, 5, 6),
    'access arguments' => array('administer list mixer'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}
/**
 * Determine which listmixer behavior function should be run based on arguments
 *
 */
function listmixer_behaviors_callback($type, $name, $root) {
  $data_post_value_name = 'data_' . $name;
  $data = $_POST[$data_post_value_name];
  // Load callback function.
  $function_name = 'listmixer_behaviors_' . $name;

  // Load include (path stored with behavior library)
  // @TODO The library might get consolidated to not be all includes,
  // but not until most of the library is actually built.
  // Get the registered behaviors.
  $behavior = listmixer_behavior_registry_load($root);
  // Load include file.
  if (file_exists($behavior['behavior_include'])) {
    include($behavior['behavior_include']);
  }
  // Call function for handling callback.
  if (function_exists($function_name)) {
    $return = call_user_func($function_name, $data);
    if (!empty($return)) {
      /*
      If we need to add more javascript to the page here, use this function.
      $set_rendered_markup = drupal_add_js('Drupal.behaviors.listmixer.behaviors.return.'
      . $behavior['behavior_name'] . '("' . $return['message'] . '");', 'inline');
      // dpm($set_rendered_markup);
      */

      // Return nothing, but set a message.
      // @TODO Date is added for testing purposes. May become unneccessary
      // If debugging messages allowed, set message every time a behavior callback is executed.
      // @TODO actually, only 1 message is set, it seems, not several as one might expect.
      if (variable_get('listmixer_debugging', 0)) {
        drupal_set_message($return['message'] . ' ' . date("F j, Y, g:i:s a"), 'status', TRUE);
      }
    }
    else{
      if (variable_get('listmixer_debugging', 0)) {
        drupal_set_message(t('Warning: Data not saved. Source: '
        . $function_name . ' ' . date("F j, Y, g:i:s a")), 'status');
      }
    }
  }
  else{
      if (variable_get('listmixer_debugging', 0)) {
        drupal_set_message(t('Warning: Data not saved. Source: '
        . $function_name . ' ' . date("F j, Y, g:i:s a")), 'status');
      }
  }
  // @DEBUG Enable for debugging callbacks
  return '';
}

/**
 * Determine which listmixer behavior function should be run based on arguments
 * @TEST: Create test for each callback
 * @TEST: Check what is returned
 */
function listmixer_behaviors_redirect_callback($type, $name, $root) {
  // @TODO: Fill in if necessary.
}


/**
 * List Mixer, init
 *
 * Add javascript and CSS to every page on a Drupal site.
 * Add an array of settings for all interactions that should
 * be listened for on each page.
 * After settings are set, run through page and add javascript
 * based on specifications in settings.
 */
function listmixer_init() {
  $path = drupal_get_path('module', 'listmixer');
  // Add main javascript file.
  drupal_add_js($path .'/listmixer.js', 'footer');

  // Add behavior JS libraries
  drupal_add_js($path .'/behaviors/listmixer_behaviors_activate.js', 'footer');
  drupal_add_js($path .'/behaviors/listmixer_behaviors_push.js', 'footer');
  drupal_add_js($path .'/behaviors/listmixer_behaviors_submit.js', 'footer');
  drupal_add_js($path .'/behaviors/listmixer_behaviors_interact.js', 'footer');

  // Add custom style sheet.
  drupal_add_css($path .'/listmixer.css');

  // Add JQuery User Interface
  jquery_ui_add('ui.sortable');

  // Add all interaction presets and callback settings to every Drupal page.
  // This array includes only presets that should always be available.
  $presets = listmixer_presets(TRUE);

  // Build array of settings for Drupal.settings javascript
  $settings = array();
  foreach ($presets as $preset) {
    // Only add presets that are enabled
    // @TODO Add user permissions here - view blah preset
    if ($preset['preset_enabled']) {
      $settings[$preset['preset_name']] = $preset;
    }
  }
  drupal_add_js(array('listmixer' => $settings), 'setting');
}

/**
 * Rebuild listmixer presets cache on admin/build/modules form.
 * @TODO: Test that this actually works.
 */
function listmixer_form_system_modules_alter(&$form, $form_state) {
  listmixer_presets(TRUE);
}

// Theming functions

/**
 * Implementation of hook_theme().
 */
function listmixer_theme() {
  return array(
    'listmixer'  => array(
      'arguments' => array(
        'namespace' => NULL,
        'path' => NULL,
        'alt' => NULL,
        'title' => NULL,
    )),
  );
}

/**
 * Code Extract theme function.
 */
function theme_listmixer() {
}
