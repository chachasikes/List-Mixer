<?php
// $Id$

/**
 * @file
 */

/*
 * Load preset based on its id
 * @param preset_id
 *   an listmixer preset array.
 * @return
 */
function listmixer_ui_preset($preset_id, $reset = FALSE) {
  $presets = listmixer_presets($reset);
  return (isset($presets[$preset_id])) ? $presets[$preset_id] : array();
}

/**
 * Load title for a preset
 */
function listmixer_ui_preset_title_callback($title, $preset = array()) {
  $replacements = array();
  if (!empty($preset)) {
    $replacements['!preset_name'] = $preset['preset_name'];
    $replacements['!preset_id'] = $preset['preset_id'];
  }
  return t($title, $replacements);
}

/**
 * Main form for presets
 */
function listmixer_ui_preset_form($form_state, $preset = array()) {
  // Clear presets cache
  cache_clear_all('listmixer:presets', 'cache');
  $form = array();
  $form['preset_id'] = array(
    '#type' => 'value',
    '#value' => $preset['preset_id'],
  );

  // Browsers don't submit disabled form values so we've got to put two copies
  // of the name on the form: one for the submit handler and one for the user.
  if ($preset['storage'] === LISTMIXER_STORAGE_DEFAULT) {
    $form['preset_name'] = array(
      '#type' => 'value',
      '#value' => $preset['preset_name'],
    );
    $form['preset_name_display'] = array(
      '#type' => 'textfield',
      '#size' => '64',
      '#title' => t('Preset Namespace'),
      '#default_value' => $preset['preset_name'],
    );
  }
  else {
    $form['preset_name'] = array(
      '#type' => 'textfield',
      '#size' => '64',
      '#title' => t('Preset Namespace'),
      '#default_value' => $preset['preset_name'],
      '#description' => t('This is the machine name of the preset, used by Drupal. Please only use alphanumeric characters, underscores (_), and hyphens (-) for preset names.'),
      '#validate' => array('listmixer_element_preset_name_validate' => array()),
      '#weight' => 1,
    );
  }
  $form['preset_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Preset Description'),
    '#default_value' => $preset['preset_description'],
    '#description' => t('Provide a description of this interaction preset.'),
    '#rows' => 3,
    '#weight' => 2,
  );
  $form['preset_method'] = array(
    '#type' => 'select',
    '#title' => t('Select the type of storage method for this interaction'),
    '#default_value' => $preset['preset_method'],
    '#options' => listmixer_listmixer_storage_register_load(),
    '#description' => t('Choose the method of how list data should be stored. (Currently just \'Nodes\', which must be enabled.)'),
    '#weight' => 3,
  );
  $form['preset_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enabled'),
    '#default_value' => $preset['preset_enabled'],
    '#description' => t('Uncheck box to disable this preset'),
    '#weight' => 4,
  );


  // Handle clone and override.
  // Preset ID is a name, preset generated by code and no preset id exists yet.
  if ($preset['#preset_copy']) {
    if ($preset['#preset_clone']) {
        $preset['preset_id'] = NULL;
        $preset['preset_name'] = NULL;
    }
    if ($preset['#preset_override']) {
        $preset['preset_id'] = NULL;
        // Disable name field.
        $form['preset_name']['#disabled'] = TRUE;
        $form['preset_name_display']['#disabled'] = TRUE;
    }
  }


  if (!empty($preset['preset_id']) || $preset['#preset_copy']) {
    // Add interactions form.
    $form = listmixer_ui_interactions_form($form, $form_state, $preset);
    // Add behaviors form.
    $form = listmixer_ui_behaviors_form($form, $form_state, $preset);
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => $preset['storage'] === LISTMIXER_STORAGE_DEFAULT ? t('Override Defaults') : t('Save Preset'),
    '#weight' => 9,
  );



  // For new presets don't show the preview or all actions to be added.
  if (empty($preset['preset_id'])) {
    return $form;
  }
  return $form;
}

/**
 * Save an listmixer preset.
 *
 * @param preset
 *   an listmixer preset array.
 * @return
 *   a preset array.  In the case of a new preset, 'preset_id' will be populated.
 */
function listmixer_preset_save($preset) {
  if (isset($preset['preset_id']) && is_numeric($preset['preset_id'])) {
    drupal_write_record('listmixer_preset', $preset, 'preset_id');
  }
  else {
    drupal_write_record('listmixer_preset', $preset);
  }

  // Reset presets cache.
  listmixer_presets(TRUE);

  // Rebuild Theme Registry
  drupal_rebuild_theme_registry();

  // User feedback
  drupal_set_message(t('List Mixer preset saved'), 'status');
  return $preset;
}

/**
 * Delete a listmixer preset.
 *
 * @param preset
 *   an listmixer preset array.
 * @return
 *   boolean
 */
function listmixer_preset_delete($preset) {
  db_query('DELETE FROM {listmixer_preset} where preset_id = %d', $preset['preset_id']);

  listmixer_ui_behavior_delete($preset);
  listmixer_ui_interactions_delete($preset);

  listmixer_presets(TRUE);
  return TRUE;
}

function listmixer_ui_preset_form_validate(&$form, &$form_state) {
  $values = &$form_state['values'];
  // Preset ID is a name, preset generated by code and no preset id exists yet.
  if (($values['#preset_copy']) && ($values['#preset_override'])) {
    //  $values['preset_name'] = $values['preset_name_display'];
      // @TODO Deal with override disable/naming/preset id (two versions in db?
      // no...we should ignore the module version and add normally.
     // $values['preset_id'] = NULL; // Override won't have a preset id.
  }
  if (($values['#preset_copy']) && (!empty($values['#preset_clone']))) {
      $values['preset_id'] = NULL;
  }

  /* Adjust behavior values */
  /* The form values, set by options return a string.
     The behaviors must be converted to an array.
     Otherwise, the full preset is passed in, which includes the
     full array for the behavior. */
  $new_behaviors = array();
  foreach ($form_state['values']['behaviors'] as $behavior => $behavior_value) {
    if (!is_array($behavior_value)) {
      $new_behavior = array(
        'behavior_name' => $behavior_value,
        'behavior_type' => $behavior
      );
      $new_behaviors[$behavior] = $new_behavior;
    }
    else {
      $new_behaviors[$behavior] = $behavior_value;
    }
  }
  $form_state['values']['behaviors'] = $new_behaviors;
  // Check for duplicates.
  foreach (listmixer_presets(TRUE) as $preset) {
    if ($values['preset_name'] == $preset['preset_name'] && $values['preset_id'] != $preset['preset_id'] && empty($values['#preset_override'])) {
      form_set_error('preset_name', t('The preset name you have chosen is already in use. (Including in programmatically created presets.'));
      break;
    }
  }

  // Check for illegal characters in preset names.
  if (preg_match('/[^0-9a-zA-Z_\-]/', $values['preset_name'])) {
    form_set_error('preset_name', t('Please only use alphanumeric characters, underscores (_), and hyphens (-) for preset names.'));
  }
}

/**
 * Submit preset form.
 */
function listmixer_ui_preset_form_submit($form, &$form_state) {
  // Save the preset first to retrieve the preset_id when overriding.
  $preset = listmixer_preset_save($form_state['values']);
  // Add new preset id to form and subforms.
  if ($form_state['values']['#preset_copy']) {
    // @TODO Add clone/override support.
    if (($values['#preset_copy']) && (!empty($values['#preset_clone']))) {
       // $values['preset_name'] = $values['preset_name_display'];
        $values['preset_id'] = NULL;
    }
    else {
    }
    $form_state['values']['preset_id'] = $preset['preset_id'];
    // Assign form state values from form.
    $form_state['values']['behaviors'] = $preset['behaviors'];
    // Preset ID has been generated.
    foreach ($form_state['values']['behaviors'] as &$behavior) {
      $form_store = array(
        'preset_id' => $preset['preset_id'],
        'behavior_name' => $behavior['behavior_name'],
        'behavior_type' => $behavior['behavior_type'],
      );
      $behavior = $form_store;
    }
    $form_state['values']['interactions'][0]['preset_id'] = $preset['preset_id'];
  }

  // Save Behaviors
  if (isset($form_state['values']['behaviors'])) {
    listmixer_behavior_save($form, &$form_state);
  }
  // Save Interactions
  if (isset($form_state['values']['interactions'])) {
    $form['preset_method']['#default_value'] = $form_state['values']['preset_method'];
    listmixer_ui_interactions_save($form, &$form_state);
  }

  // Push back to the preset form
  $form_state['redirect'] = 'admin/build/listmixer/'. $preset['preset_id'];
}

function listmixer_ui_preset_delete_form($form_state, $preset = array()) {
  if (empty($preset)) {
    drupal_set_message(t('The specified preset was not found'), 'error');
    drupal_goto('admin/build/listmixer');
  }

  $form = array();
  $form['preset_id'] = array('#type' => 'value', '#value' => $preset['preset_id']);
  return confirm_form(
    $form,
    t('Are you sure you want to delete the preset %preset?',
      array('%preset' => $preset['preset_name'])
    ),
    'admin/build/listmixer',
    t('This action cannot be undone.'),
    t('Delete'),  t('Cancel')
  );
}

function listmixer_ui_preset_delete_form_submit($form, &$form_state) {
  $preset = listmixer_ui_preset($form_state['values']['preset_id']);
  listmixer_preset_delete($preset);
  drupal_set_message(t('Preset %name (ID: @id) was deleted.', array('%name' => $preset['preset_name'], '@id' => $preset['preset_id'])));
  $form_state['redirect'] = 'admin/build/listmixer';
}

/**
 * Listmixer preset clone form. Wraps around main preset form function.
 */
function listmixer_ui_preset_clone_form(&$form_state, $preset = array()) {
  // Set a variable indicating we are copying a preset (from code or database.)
  $preset['#preset_copy'] = TRUE;
  // If preset id is not empty, it means we are cloning an existing preset.
  if (is_numeric($preset['preset_id'])) {
    $preset['#preset_clone'] = TRUE;
  }
  else {
    $preset['#preset_override'] = TRUE;
  }
  if (empty($preset)) {
    drupal_set_message(t('The specified preset was not found'), 'error');
    $form_state['redirect'] = 'admin/build/listmixer';
  }
  $form = listmixer_ui_preset_form($form_state, $preset);
  return $form;
}

/**
 * Listmixer preset clone form validate. Wraps around main preset form validation function.
 */
function listmixer_ui_preset_clone_form_validate(&$form, &$form_state) {
  $form_state['values']['#preset_copy'] = TRUE;
  // If preset id is not empty, it means we are cloning an existing preset.
  if (($form_state['values']['#preset_copy']) && (is_numeric($form_state['values']['preset_id']))) {
    $form_state['values']['#preset_clone'] = TRUE;
  }
  else {
    $form_state['values']['#preset_override'] = TRUE;
  }

  $form_state['redirect'] = 'admin/build/listmixer';
  listmixer_ui_preset_form_validate(&$form, &$form_state);
}
/**
 * Listmixer preset clone form submit.
 */
function listmixer_ui_preset_clone_form_submit(&$form, &$form_state) {
  $form_state['values']['#preset_copy'] = TRUE;
  // If preset id is not empty, it means we are cloning an existing preset.
  if (!empty($preset['#preset_clone'])) {
    $form_state['values']['#preset_clone'] = TRUE;
  }
  else {
    $form_state['values']['#preset_override'] = TRUE;
  }
  $form_state['redirect'] = 'admin/build/listmixer';
  listmixer_ui_preset_form_submit(&$form, &$form_state);
}

/**
 * Listmixer preset import form.
 */
function listmixer_ui_preset_import_form(&$form_state, $preset = array()) {
  // @TODO ignore preset_id
/*   $preset['#preset_import'] = TRUE;   */
  $form = listmixer_ui_preset_form($form_state, $preset);
  $form['import'] = array(
    '#type' => 'textarea',
    '#default_value' => '',
    '#rows' => 15,
    '#resizable' => TRUE,
    '#weight' => -100,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Done'),
    '#weight' => 9,
  );
  $form_state['redirect'] = 'admin/build/listmixer';
  return $form;
}

/**
 * Validated preset code pasted into a text field and convert
 * to preset array.
 */
function listmixer_ui_preset_import_form_validate(&$form, &$form_state) {
  // Convert data from field (this method suppresses errors.
  // This is the same method used by cck content copy.
  @eval($form_state['values']['import']);
  $form_state['values'] = $preset;
/*   listmixer_ui_preset_form_validate(&$form, &$form_state); */
  $form_state['values']['#preset_copy'] = TRUE;
  // If preset id is not empty, it means we are cloning an existing preset.
  //if (($form_state['values']['#preset_copy']) && (is_numeric($form_state['values']['preset_id']))) {
    $form_state['values']['#preset_clone'] = TRUE;
  //}
  $form_state['redirect'] = 'admin/build/listmixer';
  listmixer_ui_preset_form_validate(&$form, &$form_state);
}

function listmixer_ui_preset_import_form_submit(&$form, &$form_state) {
/*   $form_state['values']['#preset_copy'] = TRUE; */
  $form_state['values']['#preset_copy'] = TRUE;
  // If preset id is not empty, it means we are cloning an existing preset.
  if (!empty($preset['#preset_clone'])) {
    $form_state['values']['#preset_clone'] = TRUE;
  }
  $form_state['redirect'] = 'admin/build/listmixer';
  listmixer_ui_preset_form_submit(&$form, &$form_state);
}

/**
 * listmixer preset export form.
 */
function listmixer_ui_preset_export_form(&$form_state, $preset = array()) {
  if (empty($preset)) {
    drupal_set_message(t('The specified preset was not found'), 'error');
    $form_state['redirect'] = 'admin/build/listmixer';
  }

  $preset_export = array(
    'preset_name' => $preset['preset_name'],
    'preset_description' => $preset['preset_description'],
    'preset_method' => $preset['preset_method'],
    'preset_enabled' => $preset['preset_enabled'],
  );
  $preset_export['behaviors'] = $preset['behaviors'];
  foreach ($preset_export['behaviors'] as &$behavior) {
    unset($behavior['preset_id']);
    unset($behavior['id']);
    // Unset the settings because they will always be called dynamically.
    unset($behavior['settings']);
  }

  $preset_export['interactions'][0] = $preset['interactions'];
  unset($preset_export['interactions'][0]['preset_id']);
  unset($preset_export['interactions'][0]['id']);

  $exported = '$preset = ';
  $exported .= var_export($preset_export, TRUE) .';';
  $rows = substr_count($exported, "\n") + 1;

  $form = array();
  $form['export'] = array(
    '#type' => 'textarea',
    '#default_value' => $exported,
    '#rows' => $rows,
    '#resizable' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Done'),
    '#weight' => 9,
  );
  $form_state['redirect'] = 'admin/build/listmixer';
  return $form;
}

/**
 *
 */
function listmixer_ui_preset_export_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'admin/build/listmixer';
}