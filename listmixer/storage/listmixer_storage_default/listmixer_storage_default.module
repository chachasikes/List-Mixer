<?php
// $Id$

/*
 * @file
 * Main module file for List Mixer Node Storage module
 */

/**
 *  listmixer_storage_register hook implementation
 *  Return this type to the list of storage methods available to the preset selector.
 */

function listmixer_storage_default_listmixer_storage_register() {
  return array(
    array(
    'name' => 'Default',
    'module' => 'listmixer_storage_default',
    'weight' => '-10',
    ),
  );
}
/**
 * Create form to update interactions
 */
function listmixer_storage_default_load_interactions_form(&$form, &$form_state, $preset = array()) {
  if (!$preset['#preset_copy']) {
    $results = db_query("SELECT * FROM {listmixer_storage_default} WHERE preset_id = %d", $preset['preset_id']);
    while ($row = db_fetch_array($results)) {
      $interactions = $row;
    }
  }
  else{
    $interactions = $preset['interactions'];
  }
  $form = array();
  $form['id'] = array(
    '#type' => 'value',
    '#value' => $interactions['id'],
  );
  $form['preset_id'] = array(
    '#type' => 'value',
    '#value' => $preset['preset_id'],
  );
  $form['interactions_labels'] = array(
      '#type' => 'fieldset',
      '#title' => t('1. Label the interaction'),
      '#description' => '<p>Label for the interaction. Will display to user. You may leave this blank.</p>',
      '#weight' => 0,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
  );
  $form['interactions_introduction'] = array(
    /* Set up which html elements your interaction should be applied to, and where it should be saved.
     */
  );
  $form['interactions_label'] = array(
      '#type' => 'textfield',
      '#title' => t('Label for interaction'),
      '#description' => 'Title of interaction for end-user.',
      '#default_value' => $interactions['interactions_label'],
      '#weight' => 1,
  );
  $form['interactions_help'] = array(
      '#type' => 'textarea',
      '#title' => t('Help Text for Drupal User'),
      '#description' => '<p>Instructions for end-user.</p>',
      '#default_value' => $interactions['interactions_help'],
      '#weight' => 2,
      '#rows' => 2,
  );
  $form['interactions_interactive_area'] = array(
      '#type' => 'fieldset',
      '#title' => t('2. Interactive area'),
      '#description' => '<p>This is the container that ListMixer will look
      for to apply presets. If this html element is not on a page, ListMixer will not
      get load the preset.</p>
      <p>Example: div#block-views-babble-block_1</p>

      <p>Define selector for an html element of a page
      that will contain the interactive widgets. This could be the same as the
      target container, or it could be another region of the page.</p>

      <p>Define a selector that will locate
      the html elements that should receive interactive widgets.</p>
      <p>The element receivers should exist inside the interactive
      region</p>
      <p>Example: table.views-view-grid td</p>
      <ul>
      <li>Tip: If you want an element to show up in the form generated
       by listmixer, enter this: form#listmixer-container-babble
       (but replace "babble" with the name of your interaction setting</li>
      </ul>',
      '#weight' => 3,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
  );
  $form['interactions_container'] = array(
      '#type' => 'textfield',
      '#size' => 90,
      '#title' => t('Selector: Main Interaction Container'),
      '#description' => 'Most external element selector that will contain the whole interaction.<br />
      (Example, <em>div.view-content</em>.) If empty, defaults to &lt;body&gt;. <br />
      If element not found, interaction will not be applied to a page.',
      '#default_value' => $interactions['interactions_container'],
      '#weight' => 4,
  );
  $form['interactions_region'] = array(
      '#type' => 'textfield',
      '#size' => 90,
      '#title' => t('Selector: Interactive Region'),
      '#description' => 'Element selector inside the main interaction container. <br />
      Set equal to the main container to target that container.<br />
      (Example, <em>div.field-items</em> elements.)',
      '#default_value' => $interactions['interactions_region'],
      '#weight' => 5,
  );
  $form['interactions_inclusions'] = array(
      '#type' => 'textfield',
      '#size' => 90,
      '#title' => t('Selector: Interactive Element Receivers'),
      '#description' => 'Element selector inside interactive region that will receive interactive elements.<br />
      (Example, <em>div.field-item</em> elements that receive checkboxes.)<br />
      form#listmixer-container-babble',
      '#default_value' => $interactions['interactions_inclusions'],
      '#weight' => 6,
  );

  $form['interactions_source_value'] = array(
      '#type' => 'fieldset',
      '#title' => t('3. Source Values: Elements that point to values that should be stored'),
      '#description' => '<p>Define a selector that will contain
      the value that should be passed to the target node.</p>
      <p>The source value selector should exist inside the markup
      for the element receiver.</p>
      <p>Example markup:</p>
      <pre>
           &lt;div class="view"&gt;
              &lt;table id="views-grid"&gt;
                &lt;tr...
                  &lt;td&gt;
                    &lt;span class="list-mixer-source-value"&gt;614&lt;/span&gt;
      </pre>
      <p>Example selector: span.list-mixer-source-value</p>
      <ul>
        <li>You may need to add this value to your content.</li>
        <li>ListMixer will hide this value for you.</li>
        <li>The value should be compatible with where it will be
            saved in the node. It should be a number if it will
            be saved to a nodereference field.</li>
      </ul>
      <p>Add the attribute (of the Source ID), for example 
      \'href\' if the source ID selector is \'a\'.</p>',
      '#weight' => 7,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
  );
  $form['interactions_source_id'] = array(
      '#type' => 'textfield',
      '#size' => 90,
      '#title' => t('Selector: Source Value(s)'),
      '#description' => 'Element selector inside interactive element receiver that contains the value to be stored. (Example, <em>span.field-content</em> or <em>a</em>.)',
      '#default_value' => $interactions['interactions_source_id'],
      '#weight' => 8,
  );
  $form['interactions_source_id_attr'] = array(
      '#type' => 'textfield',
      '#size' => 90,
      '#title' => t('Selector: Source Value Attribute'),
      '#description' => 'Attribute of source value selector that contains the value. (Example, <em>href</em> if selector is <em>a</em>.) If empty, will use the .html() value of the selector.',
      '#default_value' => $interactions['interactions_source_id_attr'],
      '#weight' => 9,
  );
  $form['interactions_target_value'] = array(
      '#type' => 'fieldset',
      '#title' => t('4. Target: where data should be saved TO '),
      '#description' => '<p>Define a jQuery compatible selector.</p>
    This is the node that data should be saved <strong>TO.</strong>
    <p>There are a few ways to generate this number.</p>
    <ol>
    <li>You can create a container that just contains the node id. <br />
    (For example, a views node id field, with no label.)<br />
     <em>ListMixer will hide this element for you.</em>
    </li>
    <li>You can point to a link that contains the path that should be saved to.<br />
    (For example, a linking node title. Create the selector that points to the link (a).<br />
    <em>Then add \'href\' to the Target Value Attribute selector below: The href contains the path.</em>
    </li>
    </ol>

    <p>Example markup: &lt;div class="class-for-listmixer-container-node-id"&gt;345&lt;/div&gt;</p>
    <p>Example selector: div.class-for-listmixer-container-node-id</p>

    <p>This is an example that would work with the NID field from a view:</p>
    <p>Example markup: &lt;div id="#block-views-babble-block_1"&gt;&lt;div class="views-field-nid"&gt;&lt;span class="field-content"&gt;345&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</p>
    <p>Example selector: div#block-views-babble-block_1 div.views-field-nid span.field-content</p>

    The html of the target should contain only the numeric node id.

    </p>


    <p>Add the attribute (of the Target ID), for example 
      \'href\' if the source ID selector is \'a\'.</p>'

    . t('<p>Enter the machine name of the field that
       should be saved to.</p>
       <p>This should match the widget "Push" type you selected above.
       <em>Example: field_text_babble</em></p>'),
      '#weight' => 10,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
  );
  $form['interactions_target_id'] = array(
    '#type' => 'textfield',
    '#size' => 90,
    '#title' => t('Selector: Target Node ID Value'),
    '#default_value' => $interactions['interactions_target_id'],
    '#description' => 'Element selector that points to the value of the node that data should be saved to. Can be a numeric nid value or a drupal path.',
    '#weight' => 11,
  );
  $form['interactions_target_id_element'] = array(
      '#type' => 'textfield',
      '#size' => 90,
      '#title' => t('Selector: Target Element Receiver'),
      '#description' => 'Selector element for target (Example, <em>li</em>.',
      '#default_value' => $interactions['interactions_target_id_element'],
      '#weight' => 12,
  );
  $form['interactions_target_id_attr'] = array(
      '#type' => 'textfield',
      '#size' => 90,
      '#title' => t('Selector: Target Value Attribute'),
      '#description' => 'Attribute of target value selector that contains the value. (Example, <em>href</em> if selector is <em>a</em>.) If empty, will use the .html() value of the selector.',
      '#default_value' => $interactions['interactions_target_id_attr'],
      '#weight' => 12.5,
  );
  $form['interactions_target_field'] = array(
      '#type' => 'textfield',
      '#size' => 90,
      '#title' => t('Fieldname: Target Field'),
      '#description' => 'Machine name of the field in the node that data should be stored to. (Example, <em>field_reference_photo.</em>)',
      '#default_value' => $interactions['interactions_target_field'],
      '#weight' => 13,
  );
  // @TODO Fix fieldset so it will store the data properly.
  $form['interactions_labels'] = array(
      '#type' => 'fieldset',
      '#title' => t('Interactive element labels'),
      '#weight' => 7,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 14,
  );
  $form['interactions_interact_label'] = array(
      '#type' => 'textfield',
      '#size' => 90,
      '#title' => t('Label for interactive element'),
      '#description' => t('<p>Enter text as it should appear to user. (Optional)</p>'),
      '#default_value' => $interactions['interactions_interact_label'],
      '#weight' => 15,
  );
  $form['interactions_submit_label'] = array(
      '#type' => 'textfield',
      '#size' => 90,
      '#title' => t('Label for submit element'),
      '#description' => t('<p>Enter text as it should appear to user. (Optional)</p>'),
      '#default_value' => $interactions['interactions_submit_label'],
      '#weight' => 16,
  );
  $form['interactions_push_label'] = array(
      '#type' => 'textfield',
      '#size' => 90,
      '#title' => t('Label for push element'),
      '#description' => t('<p>Enter text as it should appear to user. (Optional)</p>'),
      '#default_value' => $interactions['interactions_push_label'],
      '#weight' => 17,
  );
  $form['interactions_activate_label'] = array(
      '#type' => 'textfield',
      '#size' => 90,
      '#title' => t('Label for activate element'),
      '#description' => t('<p>Enter text as it should appear to user. (Optional)</p>'),
      '#default_value' => $interactions['interactions_activate_label'],
      '#weight' => 18,
  );
  /*
  $all_nodetypes = node_get_types();
  $all_nodetype_options = array();
  foreach ($all_nodetypes as $item) {
    $all_nodetype_options[$item->type] = $item->name;
  }
  $form['interactions_source_content_types'] = array(
      '#type' => 'disabled',
      '#title' => t('Content types'),
      '#description' => t('Select which content types will be allowed to be added to the list content type. This won\'t do much just yet, but might help with permissions'),
      '#options' => $all_nodetype_options,
      '#default_value' => $interactions['interactions_source_content_types'],
      '#weight' => 20,
  );*/
  return $form;
}
/**
 * Load a behavior or set of behaviors
 *
 * @param preset
 *   an listmixer preset array.
 * @return
 *   a preset array.  In the case of a new preset, 'preset_id' will be populated.
 */
function listmixer_storage_default_listmixer_storage_load($preset) {
  $interactions = array();
  if (!empty($preset['preset_id'])) {
    $result = db_query("SELECT * FROM {listmixer_storage_default} WHERE preset_id = %d", $preset['preset_id']);
    while ($row = db_fetch_array($result)) {
      $interactions = $row;
    }
  }
  return $interactions;
}

/**
 * Save an listmixer preset.
 *
 * @param preset
 *   an listmixer preset array.
 * @return
 *   a preset array.  In the case of a new preset, 'preset_id' will be populated.
 */
function listmixer_storage_default_listmixer_storage_save($form, $form_state) {
  $form_store = $form_state['values']['interactions'][0];
  $form_store['preset_id'] = $form_state['values']['preset_id'];
  // If an id already exists
  if (!empty($form['interactions'][0]['id']['#value'])) {
    drupal_write_record('listmixer_storage_default', $form_store, array('preset_id'));
  }
  else {
    drupal_write_record('listmixer_storage_default', $form_store);
  }
  return $behavior;
}

/**
 * Delete interaction preset.
 */
function listmixer_storage_default_listmixer_storage_delete($preset) {
  db_query("DELETE FROM {listmixer_storage_default} WHERE preset_id = '%d'", $preset['preset_id']);
  return TRUE;
}