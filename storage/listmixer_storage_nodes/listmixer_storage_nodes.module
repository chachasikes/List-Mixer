<?php
// $Id$

/*
 *******************************************************************************
 * @file listmixer_storage_nodes.module
 * Main module file for List Mixer Node Storage module
 *******************************************************************************
 */
 
/**
 *  listmixer_storage_register hook implementation
 *  Return this type to the list of storage methods available to the preset selector.
 */
 
function listmixer_storage_nodes_listmixer_storage_register() {
  return array(
    array(
    'name' => 'Nodes', 
    'module' => 'listmixer_storage_nodes',
    'weight' => '-10',
    ),
  );
}
/**
 * Create form to update interactions
 */
function listmixer_storage_nodes_load_interactions_form(&$form, &$form_state, $preset = array()) {
  // @TODO: use interaction preset load function instead
  $results = db_query("SELECT * FROM {listmixer_storage_nodes} WHERE preset_id = %d", $preset['preset_id']);
  while ($row = db_fetch_array($results)) {
    $interactions = $row;
  }
  $form = array();
  
  $form['id'] = array(
    '#type' => 'value',
    '#value' => $interactions['id'],
  );
  $form['preset_id'] = array(
    '#type' => 'value',
    '#value' => $preset['preset_id'],
  );
  $form['interactions_help'] = array(
      '#type' => 'textarea',
      '#title' => t('Help Text for Drupal User'),
      '#description' => '<p>' .t('Explain to the Drupal User how they 
      should use this interaction.') . '</p>',
      '#default_value' => $interactions['interactions_help'],
      '#weight' => 0,
  ); 
  $form['interactions_target_id'] = array(
    '#type' => 'textarea',
    '#title' => t('Interaction Target ID'),
    '#default_value' => $interactions['interactions_target_id'],
    '#description' => '<p>' . t('Define a jQuery command that will
    extract the target node id from the rendered Drupal page.') . '</p><p>' . t('
    You will need to supply this in your markup. This is easy if you
    are using a views block with fields, just add an nid field. 
    If you add .hide() to the end of your command it will hide the nid.') . '</p><p>' . t('
    
    Example: ') . '<code>$(\'div#block-views-babble-block_1\').find(\'div.views-field-nid span.field-content\').html().hide(); </code>' . '<p>' . t('
    @TODO Check this function, adapted it from somewhere else so it may have errors.') . '</p><p>' . t('
    Since you selected the \'Nodes\' storage
    type, this means that data will be stored to nodes or fields 
    (as opposed to taxonomy vocabularies or comments.)
    
    ') . '</p>',
    '#weight' => 1,
  );
  $form['interactions_container'] = array(
      '#type' => 'textarea',
      '#title' => t('Container'),
      '#description' => '<p>' .t('This is the container that ListMixer will look
      for to apply presets. If this div is not on a page, ListMixer will not 
      get loaded.<br /><br />
      <em>Example: div#block-views-babble-block_1</em><br /><br />
      Links and buttons will *not* be available to this container.
      ') . '</p>',
      '#default_value' => $interactions['interactions_container'],
      '#weight' => 1,
  );
  $form['interactions_restrictions'] = array(
      '#type' => 'textarea',
      '#title' => t('Restrict Markup'),
      '#description' => '<p>' .t('Create a jQuery compatible string of divs, 
      form elements that will be the most external container to apply 
      interaction buttons. <br /><br />
      This is not required, but it could be helpful if you have a bunch of views 
      on a page.<br /><br />
      <em>Example: div#sidebar-left</em>
      ') . '</p>',
      '#default_value' => $interactions['interactions_restrictions'],
      '#weight' => 3,
  );
  $form['interactions_inclusions'] = array(
      '#type' => 'textarea',
      '#title' => t('Include Markup'),
      '#description' => '<p>' .t('Create a jQuery compatible string of divs, 
      form elements that will be reset within the restricted container. 
      <br /><br />
      <em>Example: a.node-link</em><br /><br />
      This should help in cases where you are trying to restrict to a bunch of 
      different containers, but in doing so have to override elements. 
      @TODO: Update with a better example.
      ') . '</p>',
      '#default_value' => $interactions['interactions_inclusions'],
      '#weight' => 4,
  );
  $form['interactions_target_field'] = array(
      '#type' => 'textarea',
      '#title' => t('Target Field'),
      '#description' => '<p>' .t('Enter the machine name of the field that
       should be saved to. Eventually this will be selection based.<br /><br />
       <em>Example: field_text_babble</em>') . '</p>',
      '#default_value' => $interactions['interactions_target_field'],
      '#weight' => 5,
  );  
  $all_nodetypes = node_get_types();
  $all_nodetype_options = array();
  foreach ($all_nodetypes as $item) {
    $all_nodetype_options[$item->type] = $item->name;
  }
  $form['interactions_source_content_types'] = array(
      '#type' => 'disabled',
      '#title' => t('Content types'),
      '#description' => t('Select which content types will be allowed to be added to the list content type. This won\'t do much just yet, but might help with permissions'),
      '#options' => $all_nodetype_options,
      '#default_value' => $interactions['interactions_source_content_types'],
      '#weight' => 20,
  );
  return $form;
}
/**
 * Load a behavior or set of behaviors
 *
 * @param preset
 *   an listmixer preset array.
 * @return
 *   a preset array.  In the case of a new preset, 'preset_id' will be populated.
 */
function listmixer_storage_nodes_listmixer_storage_load($preset) {
  $interactions = array();
  if(!empty($preset['preset_id'])) {
    $result = db_query("SELECT * FROM {listmixer_storage_nodes} WHERE preset_id = %d", $preset['preset_id']);
    while ($row = db_fetch_array($result)) {
      $interactions = $row;
    }
  } 
  return $interactions;
}

/**
 * Save an listmixer preset.
 *
 * @param preset
 *   an listmixer preset array.
 * @return
 *   a preset array.  In the case of a new preset, 'preset_id' will be populated.
 */
function listmixer_storage_nodes_listmixer_storage_save($form, &$form_state) {
  $form_store = $form_state['values']['interactions'][0];
  $form_store['preset_id'] = $form_state['values']['preset_id'];
  // If an id already exists
  if (!empty($form['interactions'][0]['id']['#value'])) {
    drupal_write_record('listmixer_storage_nodes', $form_store, array('preset_id'));
  }
  else {
    drupal_write_record('listmixer_storage_nodes', $form_store);
  }
  return $behavior;
}

/**
 * Delete interaction preset.
 */
function listmixer_storage_nodes_listmixer_storage_delete($preset) {
 db_query("DELETE FROM {listmixer_storage_nodes} WHERE preset_id = '%d'", $preset['preset_id']);
 return TRUE;
}



/**

 * 
 *

function listmixer_interactions_load_interactions($preset, $reset = FALSE) {
 static $interactions = array();

  // Clear  caches if $reset is TRUE;
  if ($reset) {
     $interactions = array();
    cache_clear_all('listmixer:interactions', 'cache');
  }
  // Return presets if the array is populated.
  if (!empty($interactions)) {
    return $interactions ;
  }

  if (($cache = cache_get('listmixer:interactions', 'cache')) && is_array($cache->data)) {
    $interactions = $cache->data;
  }
  else {
    $normal_interactions = array();
    cache_set('listmixer:interactions', $normal_interactions);
  }
  return $interactions;
}

function listmixer_interactions_load_block_ids() {

}
 */

 