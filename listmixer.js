// $Id$

var pageLoaded = 0;

Drupal.behaviors.listmixer = function() {
  if(pageLoaded == 0){
    // Read through each preset and set up the first time the page is loaded.
    $.each(Drupal.settings.listmixer, function(){
      // If interaction involves saving content to target nodes.
      if(this.preset_method == 'listmixer_storage_nodes') {
           
        // Node target finding mechanism #1, The First
        // The view must contain .views-field-nid (generated by adding a field)
        // @TODO add a setting so user can specify the class/field that contains the node data. then they can put it whereever. let it be a full jQuery command.
  
        // Find the contents of an nid field, store it, and then hide it.
        $('#' + this.interactions.interactions_target_id).find('div.views-field-nid span.field-content').each(function(){
          this.target_nid = $(this).html();
        }).hide();      
        
        // @TODO: Look up with behaviors to apply to the page
        // @TODO: Look up which behaviors to load/apply to the target
        // @TODO: So the idea will be to build a library of buttons and things, and then load them based on the behavior settings.    
        this.target_form_class = 'class="listmixer-target-form"';   
        this.target_form_id = 'listmixer-target-'+ this.preset_name;
        this.target_form = '<form id="' + this.target_form_id + '" ' + this.target_form_class + '></form>';
  
        // @TODO Move to interaction behaviors
        this.interact = '<input></input>';
        
        // @TODO Move to submit behaviors
        this.submit = '<button>Save</button>';
        
        // Call interact function, which will interpret which markup should be created.
        // Then javascript functions to apply the interact markup to the page will run.
        // Right now, this just appends the interaction to the form (ex, an input field)
        // But if the interaction type was checkboxes, then the markup would be applied
        // to the content source (input). So, for example, if we were allowing links
        // on a page to become clickable, it would apply the interaction to the whole page.
        // Still thinking out the details.   
          
        Drupal.behaviors.listmixer.interact(this);
        Drupal.behaviors.listmixer.activate(this);     
        Drupal.behaviors.listmixer.push(this);
        Drupal.behaviors.listmixer.submit(this);
        
        // Drupal.behaviors.listmixer.submit(this);
        
        // Add callbacks
        
        $('#' + this.interactions.interactions_target_id).append(this.target_form);
  
        $('#' + this.target_form_id).append(this.interact);
        
        // Add interact button (load js from interact button function)
        $('#' + this.target_form_id).append(this.submit);
        
        // @TODO: connect submit function to push callback and data
        
        // @TODO: add field spec to settings for behaviors
        
        
        
        // options:
        // if view content contains 'nid'...
        // http://11heavens.com/theming-Drupal-6-from-the-module-layer
        
        // semantic view
        // make user add markup with node id -- this ensure they have ultimate control * (definite option)
        // theme preprocess function all nodes add class listmixer-node-#nid
      }
    });
  }

  pageLoaded++;
  // Every time a page is reloaded...
}


 
 
// Build functions that load the behaviors.
// Load javascript behavior libraries.
Drupal.behaviors.listmixer.interact = function(preset) {    
  Drupal.behaviors.listmixer.behaviorCreate(preset, 'interact');
  var Interact = new Drupal.behaviors.listmixer.Interact();
  Interact.init();        
}

Drupal.behaviors.listmixer.activate = function(preset) {    
  Drupal.behaviors.listmixer.behaviorCreate(preset, 'activate');
  var Activate = new Drupal.behaviors.listmixer.Activate();
  Activate.init();         
}

Drupal.behaviors.listmixer.push = function(preset) {    
  Drupal.behaviors.listmixer.behaviorCreate(preset, 'push'); 
  var Push = new Drupal.behaviors.listmixer.Push();
  Push.init();      
}

Drupal.behaviors.listmixer.submit = function(preset) {    
  Drupal.behaviors.listmixer.behaviorCreate(preset, 'submit');
  var Submit = new Drupal.behaviors.listmixer.Submit();
  Submit.init();         
}
// Load javascript includes, set up the callbacks for all behaviors.
Drupal.behaviors.listmixer.behaviorCreate = function(preset, type) {
  var preset = preset;
  var type = type;
  var preset_id = preset.preset_id;
  var callback;
  var behavior_name;
  var behavior_function;
  // Create an array of the settings for the current behavior.
  var behavior = preset.behaviors[type];
  if(behavior.settings != null){
    callback = Drupal.settings.basePath + behavior.settings.behavior_callback;
    behavior_function = behavior.settings.behavior_function;
    behavior_name =  behavior.settings.behavior_name;
 


    // Load data from settings array contained in each behavior.
    // @TODO a callback is called. a menu item figures out who the callback is for, looks up the registry and calls the appropriate function.
    // Grab data from somewhere that's stored somewhere else.
    // The data might need to be cleaned up if the funciton is used several times before submitting  
    var data_label = 'data_' + behavior_name;
    //$(this).attr('drag_list_value')
    //var data = {data_label : 'test data content'};
    var data = { name: "John", time: "2pm" };
       
    // Ajax call to callback for this behavior.
    // @TODO currently this runs automatically, make push happen after submit behavior is activated.
    if(callback != null) {
      $.post(callback, data, Drupal.behaviors.listmixer.redirect(preset, data));
    }
  }
  return false; 
}
    
Drupal.behaviors.listmixer.Behavior = function(){ 
  // Create new object stored in include file.
  var Behavior = new Behavior();
  //Behavior.init();
  //return Behavior;
}

Drupal.behaviors.listmixer.redirect = function(preset, data) {
  var preset = preset;
  var data = data;  
  
  // Get the returned javascript from the function and apply it wherever it is supposed to go
  // @TODO: maybe - Calling the redirect function, which returns $output?

  return false;  
}
